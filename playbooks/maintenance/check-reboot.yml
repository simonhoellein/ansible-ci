---
- name: Check pending reboots on Ubuntu hosts
  hosts: all
  gather_facts: false
  become: true

  vars:
    reboot_flag_file: /var/run/reboot-required

  tasks:
    - name: Check if reboot is required (Ubuntu)
      stat:
        path: "{{ reboot_flag_file }}"
      register: reboot_flag

    - name: Save per-host reboot status
      set_fact:
        reboot_required: "{{ reboot_flag.stat.exists | default(false) }}"

    - name: Collect host record for summary
      set_fact:
        reboot_records: >-
          {{
            (reboot_records | default([])) +
            [ { 'host': inventory_hostname, 'needs_reboot': reboot_required } ]
          }}

    - name: Print ASCII table for ALL hosts
      run_once: true
      delegate_to: localhost
      vars:
        # Build a stable, sorted list from hostvars
        all_rows: >-
          {{
            play_hosts
            | sort
            | map('extract', hostvars)
            | map('combine', [{'__name__': item.key}])
            | list
          }}
        # Compute column widths
        host_col_width: >-
          {{
            (
              [ 'Host' | length ] +
              (play_hosts | map('length') | list)
            ) | max
          }}
        status_col_width: 14  # fits "Reboot Required"
        sep: >-
          {{
            '+' ~ ('-' * (host_col_width + 2)) ~ '+' ~ ('-' * (status_col_width + 2)) ~ '+'
          }}
      debug:
        msg: >-
          {# header #}
          {{ sep }}
          | {{ 'Host' | ljust(host_col_width) }} | {{ 'Reboot Required' | ljust(status_col_width) }} |
          {{ sep }}
          {# rows #}
          {%- for h in play_hosts | sort %}
          | {{ h | ljust(host_col_width) }} | {{ (hostvars[h].reboot_required | default(false)) | ternary('Yes','No') | ljust(status_col_width) }} |
          {%- endfor %}
          {{ sep }}

    - name: Print ASCII table for ONLY hosts needing reboot
      run_once: true
      delegate_to: localhost
      vars:
        needing: >-
          {{
            play_hosts
            | select('in', play_hosts)
            | select('equalto', None)
          }}
        needing_hosts: >-
          {{
            play_hosts
            | sort
            | selectattr('___dummy', 'defined')
          }}
      debug:
        msg: >-
          {%- set needing = [] -%}
          {%- for h in play_hosts | sort -%}
            {%- if hostvars[h].reboot_required | default(false) -%}
              {%- set _ = needing.append(h) -%}
            {%- endif -%}
          {%- endfor -%}
          {%- set host_col_width = ([ 'Host' | length ] + (needing | map('length') | list + [4])) | max -%}
          {%- set status_col_width = 14 -%}
          {%- set sep = '+' ~ ('-' * (host_col_width + 2)) ~ '+' ~ ('-' * (status_col_width + 2)) ~ '+' -%}
          {{ sep }}
          | {{ 'Host' | ljust(host_col_width) }} | {{ 'Reboot Required' | ljust(status_col_width) }} |
          {{ sep }}
          {%- if needing | length == 0 -%}
          | {{ 'None' | ljust(host_col_width) }} | {{ 'No' | ljust(status_col_width) }} |
          {%- else -%}
            {%- for h in needing -%}
          | {{ h | ljust(host_col_width) }} | {{ 'Yes' | ljust(status_col_width) }} |
            {%- endfor -%}
          {%- endif -%}
          {{ sep }}
